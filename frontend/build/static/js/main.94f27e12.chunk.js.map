{"version":3,"sources":["component/UserDetail.js","store/actions/transactions.js","component/LeaderBoard.js","component/Navbar.js","App.js","serviceWorker.js","store/reducers/userReducer.js","store/reducers/rootReducer.js","index.js"],"names":["connect","state","ownProps","id","match","params","users","user","className","src","icon","class","name","href","justifyContent","genKey","Math","random","toString","substring","randParty","disregard","candidates","Object","keys","filter","c","floor","length","randAmt","sender","current_sushi","sushi","max","compose","transactions","dispatch","createTransaction","newKey","newSender","newReceiver","newAmt","newPayload","receiver","amt","getState","type","payload","onClick","map","uid","to","key","style","marginLeft","t","Navbar","App","exact","path","component","LeaderBoard","UserDetail","Boolean","window","location","hostname","getIcon","rand","initState","111","222","333","444","555","bank","jobReducer","action","newTrans","assign","values","console","log","newUsers","rootReducer","combineReducers","userReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAyEeA,eAXS,SAACC,EAAOC,GAC9B,IAAMC,EAAKD,EAASE,MAAMC,OAAOF,GAC3BG,EAAQL,EAAMK,MAAMA,MACpBC,EAAOD,EAAQA,EAAMH,GAAM,KACjC,MAAO,CACLA,GAAIA,EACJG,MAAOL,EAAMK,MAAMA,MACnBC,KAAMA,KAIKP,EArEI,SAAC,GAAkB,IAAD,EAAfO,EAAe,EAAfA,KAAMJ,EAAS,EAATA,GAC1B,OACE,oCACE,yBAAKK,UAAU,eACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gBAEb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,cACb,yBAAKC,IAAKF,EAAKG,KAAMF,UAAU,KAC/B,0BAAMG,MAAM,iBACTJ,EAAKK,KADR,OACkBT,EADlB,MAIF,yBAAKQ,MAAM,eACT,uBAAGE,KAAK,KAAR,qBAIC,IAEP,yBAAKL,UAAU,gBAEb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,cAAhB,SACSD,EAAKK,KADd,OACwBT,EADxB,KAGA,oPAQF,yBAAKK,UAAU,wCACb,4BACEA,UAAU,aADZ,0BAEY,kBAFZ,sBAGS,CAAEM,eAAgB,iBAH3B,GAKE,4BAAQN,UAAU,YAAlB,YACA,4BAAQA,UAAU,WAAlB,SACA,4BAAQA,UAAU,yBAAlB,mBAOH,S,QClCTO,EAAS,WACb,OAAOC,KAAKC,SACTC,SAAS,IACTC,UAAU,EAAG,KAIZC,EAAY,SAACd,EAAOe,GACxB,IAAIC,EAAU,YAAOC,OAAOC,KAAKlB,IAMjC,MALkB,KAAde,IAEFC,EAAaA,EAAWG,QAAO,SAAAC,GAAC,OAAIA,IAAML,MAE/BC,EAAWN,KAAKW,MAAMX,KAAKC,SAAWK,EAAWM,UAK1DC,EAAU,SAACvB,EAAOwB,GACtB,IAAIC,EAAgBzB,EAAMwB,GAAQE,MAC9BC,EAAiB,SAAXH,EAAoB,GAAKC,EAAgB,EAGnD,OAFWf,KAAKW,MAAMX,KAAKC,SAAWgB,EAAM,IC0D/BC,cAAQlC,aAZC,SAAAC,GACtB,MAAO,CACLK,MAAOL,EAAMK,MAAMA,MACnB6B,aAAclC,EAAMK,MAAM6B,iBAIH,SAAAC,GACzB,MAAO,CACLC,kBAAmB,SAAA/B,GAAK,OAAI8B,EDjGC,SAAA9B,GAC/B,IAAIgC,EAASvB,IAETwB,EAAYnB,EAAUd,EAAO,IAC7BkC,EAAcpB,EAAUd,EAAOiC,GAC/BE,EAASZ,EAAQvB,EAAOiC,GACxBG,EAAa,GAMjB,OALAA,EAAWJ,GAAU,CACnBR,OAAQS,EACRI,SAAUH,EACVI,IAAKH,GAEA,SAACL,EAAUS,GAChBT,EAAS,CACPU,KAAM,eACNC,QAASL,KCkF0BL,CAAkB/B,SAG5C4B,EA7FK,SAAC,GAAgD,IAA9C5B,EAA6C,EAA7CA,MAAO6B,EAAsC,EAAtCA,aAAcE,EAAwB,EAAxBA,kBAC1C,OACE,oCACE,yBAAK7B,UAAU,aACb,sDAEA,4BACEA,UAAU,WACVwC,QAAS,WACPX,EAAkB/B,KAHtB,2BASA,yBAAKE,UAAU,OACb,yBAAKA,UAAU,cACb,4BAEE,+BACE,+BACE,4BACE,mCACA,oCACA,uCAIJ,+BACGe,OAAOC,KAAKlB,GAAO2C,KAAI,SAAAC,GACtB,MAAe,SAARA,EACL,GAEA,4BACE,4BAAKA,GACL,wBAAI1C,UAAU,kBACZ,yBAAKC,IAAKH,EAAM4C,GAAKxC,KAAMC,MAAM,WACjC,kBAAC,IAAD,CAAMwC,GAAI,SAAWD,EAAKE,IAAKF,GAC7B,4BACE1C,UAAU,2BACV6C,MAAO,CAAEC,WAAY,SAErB,0BAAM9C,UAAU,KAAKF,EAAM4C,GAAKtC,SAKtC,4BACE,0BAAMJ,UAAU,QAAQF,EAAM4C,GAAKlB,gBAUnD,yBAAKxB,UAAU,cACb,gDACA,4BACGe,OAAOC,KAAKW,GAAcc,KAAI,SAAAM,GAC7B,OACE,4BACGjD,EAAM6B,EAAaoB,GAAGzB,QAAQlB,KADjC,SAC6C,IAC1CN,EAAM6B,EAAaoB,GAAGZ,UAAU/B,KAFnC,IAE0CuB,EAAaoB,GAAGX,IAAK,IAF/D,oBCpDHY,EAdA,WACb,OACE,yBAAKhD,UAAU,gBACb,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAM2C,GAAG,IAAI3C,UAAU,cAAvB,eCaKiD,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWE,QCHzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9D,MACvB,2D,YCjBA+D,EAAU,WACd,IAAIC,EAAOpD,KAAKW,MAAMX,KAAKC,SAAWD,KAAKW,MAAM,KACjD,MAAM,8BAAN,OAAqCyC,EAArC,QAIIC,EAAY,CAChB/D,MAAO,CACLgE,IAAK,CAAE1D,KAAM,QAASoB,MAAO,EAAGtB,KAAMyD,KACtCI,IAAK,CAAE3D,KAAM,QAASoB,MAAO,EAAGtB,KAAMyD,KACtCK,IAAK,CAAE5D,KAAM,UAAWoB,MAAO,EAAGtB,KAAMyD,KACxCM,IAAK,CAAE7D,KAAM,QAASoB,MAAO,EAAGtB,KAAMyD,KACtCO,IAAK,CAAE9D,KAAM,OAAQoB,MAAO,EAAGtB,KAAMyD,KACrCQ,KAAM,CAAE/D,KAAM,OAAQoB,MAAO,MAAOtB,KAAMyD,MAE5ChC,aAAc,IAgCDyC,EA7BI,WAAgC,IAA/B3E,EAA8B,uDAAtBoE,EAAWQ,EAAW,uCAChD,OAAQA,EAAO/B,MACb,IAAK,eAEH,IAAIC,EAAU8B,EAAO9B,QACjB+B,EAAWvD,OAAOwD,OAAO,GAAI9E,EAAMkC,cACvCZ,OAAOwD,OAAOD,EAAU/B,GAGxB,IAAIjB,EAASP,OAAOyD,OAAOjC,GAAS,GAAGjB,OACnCa,EAAWpB,OAAOyD,OAAOjC,GAAS,GAAGJ,SACrCC,EAAMrB,OAAOyD,OAAOjC,GAAS,GAAGH,IAEpCqC,QAAQC,IAAR,WAAgBpD,EAAhB,YAA0Ba,EAA1B,YAAsCC,EAAtC,MACA,IAAIuC,EAAW5D,OAAOwD,OAAO,GAAI9E,EAAMK,OAIvC,OAHA6E,EAASrD,GAAQE,OAASY,EAC1BuC,EAASxC,GAAUX,OAASY,EAErB,CACLtC,MAAOiB,OAAOwD,OAAO,GAAII,GACzBhD,aAAcZ,OAAOwD,OAAO,GAAID,IAEpC,IAAK,eAEL,QACE,OAAO7E,ICpCEmF,EAJKC,YAAgB,CAClC/E,MAAOgF,ICKHC,EAAQC,YAAYJ,EAAaK,YAAgBC,MACvDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.94f27e12.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst UserDetail = ({ user, id }) => {\r\n  return (\r\n    <>\r\n      <div className=\"container  \">\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m6  \">\r\n            {/* left */}\r\n            <div className=\"card z-depth-0\">\r\n              <div className=\"card-image\">\r\n                <img src={user.icon} className=\"\" />\r\n                <span class=\"card-title h1\">\r\n                  {user.name} - [{id}]\r\n                </span>\r\n              </div>\r\n              <div class=\"card-action\">\r\n                <a href=\"#\">This is a link</a>\r\n              </div>\r\n            </div>\r\n            {/* END: card  */}\r\n          </div>{\" \"}\r\n          {/* END: left col  */}\r\n          <div className=\"col s12 m6  \">\r\n            {/* right */}\r\n            <div className=\"card z-depth-0\">\r\n              <div className=\"card-content\">\r\n                <span className=\"card-title\">\r\n                  Name: {user.name} - [{id}]\r\n                </span>\r\n                <p>\r\n                  User Details: Lorem ipsum dolor sit amet consectetur\r\n                  adipisicing elit. Et labore quaerat quibusdam vel saepe, ab\r\n                  voluptate accusantium culpa nemo fuga earum? Soluta amet nobis\r\n                  officia sed neque fuga aperiam quia?\r\n                </p>\r\n              </div>\r\n              {/* END: card-content */}\r\n              <div className=\"card-action grey lighten-4 grey-text\">\r\n                <div\r\n                  className=\"btn_panel\"\r\n                  className=\"valign-wrapper\"\r\n                  style={{ justifyContent: \"space-around\" }}\r\n                >\r\n                  <button className=\"btn teal\">Received</button>\r\n                  <button className=\"btn red\">Given</button>\r\n                  <button className=\"btn yellow black-text\">Redeemable</button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* END: card  */}\r\n          </div>\r\n          {/* END: right col  */}\r\n        </div>{\" \"}\r\n        {/* END: row */}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const id = ownProps.match.params.id;\r\n  const users = state.users.users;\r\n  const user = users ? users[id] : null;\r\n  return {\r\n    id: id,\r\n    users: state.users.users,\r\n    user: user\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(UserDetail);\r\n","export const createTransaction = users => {\r\n  var newKey = genKey();\r\n\r\n  var newSender = randParty(users, \"\");\r\n  var newReceiver = randParty(users, newSender);\r\n  var newAmt = randAmt(users, newSender);\r\n  var newPayload = {};\r\n  newPayload[newKey] = {\r\n    sender: newSender,\r\n    receiver: newReceiver,\r\n    amt: newAmt\r\n  };\r\n  return (dispatch, getState) => {\r\n    dispatch({\r\n      type: \"CREATE_TRANS\",\r\n      payload: newPayload\r\n    });\r\n  };\r\n};\r\n\r\n// generate transaction key\r\nconst genKey = () => {\r\n  return Math.random()\r\n    .toString(36)\r\n    .substring(2, 15);\r\n};\r\n\r\n// generate sender & receiver\r\nconst randParty = (users, disregard) => {\r\n  var candidates = [...Object.keys(users)];\r\n  if (disregard !== \"\") {\r\n    // remove certain ppl from the candidates list, so sender/receiver are diff person\r\n    candidates = candidates.filter(c => c !== disregard);\r\n  }\r\n  var result = candidates[Math.floor(Math.random() * candidates.length)]; // pick random sender\r\n  return result;\r\n};\r\n\r\n// generate transact amt\r\nconst randAmt = (users, sender) => {\r\n  var current_sushi = users[sender].sushi;\r\n  var max = sender === \"bank\" ? 10 : current_sushi / 2; // random ceiling\r\n  var rand = Math.floor(Math.random() * max + 1);\r\n  // console.log(\"current:\", current_sushi, \" rand:\", rand);\r\n  return rand;\r\n};\r\n","import React from \"react\";\r\n//import store from \"../store/store\";\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport UserDetail from \"./UserDetail\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { createTransaction } from \"../store/actions/transactions\";\r\nconst LeaderBoard = ({ users, transactions, createTransaction }) => {\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h3>Sushi Exchange Masters</h3>\r\n\r\n        <button\r\n          className=\"btn blue\"\r\n          onClick={() => {\r\n            createTransaction(users);\r\n          }}\r\n        >\r\n          Create Mock Transaction\r\n        </button>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m9\">\r\n            <ul>\r\n              {/* <h2>User List Component</h2> */}\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>UID</th>\r\n                    <th>NAME</th>\r\n                    <th>SUSHI</th>\r\n                  </tr>\r\n                </thead>\r\n\r\n                <tbody>\r\n                  {Object.keys(users).map(uid => {\r\n                    return uid === \"bank\" ? (\r\n                      \"\"\r\n                    ) : (\r\n                      <tr>\r\n                        <td>{uid}</td>\r\n                        <td className=\"valign-wrapper\">\r\n                          <img src={users[uid].icon} class=\"circle\" />\r\n                          <Link to={\"/user/\" + uid} key={uid}>\r\n                            <button\r\n                              className=\"btn-flat teal white-text\"\r\n                              style={{ marginLeft: \"2rem\" }}\r\n                            >\r\n                              <span className=\" \">{users[uid].name}</span>\r\n                              {/* <i className=\"material-icons white-text \">search</i> */}\r\n                            </button>\r\n                          </Link>\r\n                        </td>\r\n                        <td>\r\n                          <span className=\"gold\">{users[uid].sushi}</span>\r\n                        </td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </ul>\r\n          </div>\r\n          {/* END: left */}\r\n          <div className=\"col s12 m3\">\r\n            <p>Mock Transactions</p>\r\n            <ul>\r\n              {Object.keys(transactions).map(t => {\r\n                return (\r\n                  <li>\r\n                    {users[transactions[t].sender].name} gives{\" \"}\r\n                    {users[transactions[t].receiver].name} {transactions[t].amt}{\" \"}\r\n                    sushi\r\n                  </li>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n          {/* END: right */}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// export default LeaderBoard;\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    users: state.users.users,\r\n    transactions: state.users.transactions\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createTransaction: users => dispatch(createTransaction(users))\r\n  };\r\n};\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps))(\r\n  LeaderBoard\r\n);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar-fixed\">\r\n      <nav className=\"nav-wrapper grey darken-3\">\r\n        <div className=\"container\">\r\n          <Link to=\"/\" className=\"brand-logo\">\r\n            HiSushi\r\n          </Link>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport \"materialize-css/dist/css/materialize.min.css\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport LeaderBoard from \"./component/LeaderBoard\";\r\nimport Navbar from \"./component/Navbar\";\r\nimport UserDetail from \"./component/UserDetail\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={LeaderBoard} />\r\n          <Route path=\"/user/:id\" component={UserDetail} />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// func get random user icons\r\nconst getIcon = () => {\r\n  let rand = Math.floor(Math.random() * Math.floor(10));\r\n  return `https://picsum.photos/seed/${rand}/80`;\r\n};\r\n\r\n// dummy data\r\nconst initState = {\r\n  users: {\r\n    111: { name: \"alpha\", sushi: 5, icon: getIcon() },\r\n    222: { name: \"bravo\", sushi: 5, icon: getIcon() },\r\n    333: { name: \"charlie\", sushi: 5, icon: getIcon() },\r\n    444: { name: \"delta\", sushi: 5, icon: getIcon() },\r\n    555: { name: \"echo\", sushi: 5, icon: getIcon() },\r\n    bank: { name: \"bank\", sushi: 99999, icon: getIcon() }\r\n  },\r\n  transactions: {}\r\n};\r\n\r\nconst jobReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case \"CREATE_TRANS\":\r\n      // update transacitons\r\n      var payload = action.payload;\r\n      var newTrans = Object.assign({}, state.transactions);\r\n      Object.assign(newTrans, payload);\r\n\r\n      // update users\r\n      var sender = Object.values(payload)[0].sender;\r\n      var receiver = Object.values(payload)[0].receiver;\r\n      var amt = Object.values(payload)[0].amt;\r\n\r\n      console.log(` ${sender} ${receiver} ${amt} `);\r\n      var newUsers = Object.assign({}, state.users);\r\n      newUsers[sender].sushi -= amt;\r\n      newUsers[receiver].sushi += amt;\r\n\r\n      return {\r\n        users: Object.assign({}, newUsers),\r\n        transactions: Object.assign({}, newTrans)\r\n      };\r\n    case \"CREATE_ERROR\":\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default jobReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport userReducer from \"./userReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  users: userReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport thunk from \"redux-thunk\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./store/reducers/rootReducer\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}